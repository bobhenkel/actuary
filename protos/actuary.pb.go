// Code generated by protoc-gen-go.
// source: protos/actuary.proto
// DO NOT EDIT!

/*
Package actuary is a generated protocol buffer package.

It is generated from these files:
	protos/actuary.proto

It has these top-level messages:
	ProfileHash
	Profile
	Empty
*/
package actuary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ProfileHash struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *ProfileHash) Reset()                    { *m = ProfileHash{} }
func (m *ProfileHash) String() string            { return proto.CompactTextString(m) }
func (*ProfileHash) ProtoMessage()               {}
func (*ProfileHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Profile struct {
	Profile []byte `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*ProfileHash)(nil), "diogomonica.actuary.ProfileHash")
	proto.RegisterType((*Profile)(nil), "diogomonica.actuary.Profile")
	proto.RegisterType((*Empty)(nil), "diogomonica.actuary.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ProfileService service

type ProfileServiceClient interface {
	GetProfile(ctx context.Context, in *ProfileHash, opts ...grpc.CallOption) (*Profile, error)
	StoreProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Empty, error)
}

type profileServiceClient struct {
	cc *grpc.ClientConn
}

func NewProfileServiceClient(cc *grpc.ClientConn) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *ProfileHash, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/diogomonica.actuary.ProfileService/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) StoreProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/diogomonica.actuary.ProfileService/StoreProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProfileService service

type ProfileServiceServer interface {
	GetProfile(context.Context, *ProfileHash) (*Profile, error)
	StoreProfile(context.Context, *Profile) (*Empty, error)
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diogomonica.actuary.ProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*ProfileHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_StoreProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).StoreProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diogomonica.actuary.ProfileService/StoreProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).StoreProfile(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diogomonica.actuary.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "StoreProfile",
			Handler:    _ProfileService_StoreProfile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x4c, 0x2e, 0x29, 0x4d, 0x2c, 0xaa, 0xd4, 0x03, 0x73, 0x85, 0x84, 0x53,
	0x32, 0xf3, 0xd3, 0xf3, 0x73, 0xf3, 0xf3, 0x32, 0x93, 0x13, 0xf5, 0xa0, 0x52, 0x52, 0x32, 0xe9,
	0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89,
	0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0x2d, 0x4a, 0x8a, 0x5c, 0xdc, 0x01, 0x45, 0xf9, 0x69, 0x99,
	0x39, 0xa9, 0x1e, 0x89, 0xc5, 0x19, 0x42, 0x42, 0x5c, 0x2c, 0x19, 0x40, 0x5a, 0x82, 0x51, 0x81,
	0x51, 0x83, 0x33, 0x08, 0xcc, 0x56, 0x52, 0xe6, 0x62, 0x87, 0x2a, 0x11, 0x92, 0xe0, 0x62, 0x2f,
	0x80, 0x30, 0xc1, 0x2a, 0x78, 0x82, 0x60, 0x5c, 0x25, 0x76, 0x2e, 0x56, 0xd7, 0xdc, 0x82, 0x92,
	0x4a, 0xa3, 0x3b, 0x8c, 0x5c, 0x7c, 0x50, 0xe5, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42,
	0x19, 0x5c, 0x5c, 0xee, 0xa9, 0x25, 0x30, 0x33, 0x14, 0xf4, 0xb0, 0xb8, 0x52, 0x0f, 0xc9, 0x11,
	0x52, 0x32, 0xf8, 0x54, 0x28, 0x49, 0x35, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x44, 0x48, 0x48, 0xbf,
	0xcc, 0x50, 0x1f, 0x6a, 0xbd, 0x7e, 0x35, 0xc8, 0xa5, 0xb5, 0x42, 0x09, 0x5c, 0x3c, 0xc1, 0x25,
	0xf9, 0x45, 0xa9, 0x30, 0xbb, 0xf0, 0x9a, 0x24, 0x25, 0x85, 0x55, 0x16, 0xec, 0x0d, 0x25, 0x31,
	0xb0, 0x2d, 0x02, 0x4a, 0xdc, 0x48, 0xb6, 0x58, 0x31, 0x6a, 0x39, 0x71, 0x46, 0xb1, 0x43, 0x15,
	0x26, 0xb1, 0x81, 0x43, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x54, 0x4d, 0xef, 0x71, 0x8c,
	0x01, 0x00, 0x00,
}
